import React, { useMemo } from 'react';
import { VscChromeClose, VscFilePdf } from "react-icons/vsc";
import jsPDF from 'jspdf';
import AdminProfile from '../../../hooks/AdminHooks/AdminProfile.js';
const AllHistory = ({ setTotalReserve, AllHistory }) => {

  const { profile } = AdminProfile();

  const mergedHistory = useMemo(() => {
    const userMap = new Map();

    AllHistory.forEach(item => {
      const key = item.name;
      if (!userMap.has(key)) {
        userMap.set(key, {
          userName: key,
          items: [],
          totalItems: 0,
          totalPrice: 0
        });
      }

      const userEntry = userMap.get(key);
      userEntry.items.push(item);
      userEntry.totalItems += item.quantity;
      userEntry.totalPrice += item.price * item.quantity;
    });

    return Array.from(userMap.values());
  }, [AllHistory]);



  const generatePDF = () => {
    const doc = new jsPDF();
    
    // Current date and admin info
    const currentDate = new Date().toLocaleDateString();
    const adminName = profile[0]?.name || 'Admin';

    // Set document properties
    doc.setFontSize(12);
    doc.setTextColor(33, 33, 33);

    // Header
    doc.setFontSize(16);
    doc.text('Transaction History Report', 14, 22);
    
    // Subheader with admin and date
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated by: ${adminName}`, 14, 30);
    doc.text(`Date: ${currentDate}`, 14, 37);

    // Table headers
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text('User Name', 14, 50);
    doc.text('Total Items', 80, 50);
    doc.text('Total Price', 140, 50);

    // Draw a line under headers
    doc.setLineWidth(0.5);
    doc.line(14, 55, 196, 55);

    // Populate data
    let yOffset = 65;
    
    mergedHistory.forEach((userEntry) => {
      // User summary
      doc.setTextColor(0, 0, 0);
      doc.text(userEntry.userName, 14, yOffset);
      doc.text(userEntry.totalItems.toString(), 80, yOffset);
      doc.text(`₱${userEntry.totalPrice.toFixed(2)}`, 140, yOffset);
      
      yOffset += 10;

      // Detailed items
      doc.setTextColor(100, 100, 100);
      userEntry.items.forEach((item) => {
        doc.text(`- ${item.product_Name}`, 20, yOffset);
        doc.text(`Qty: ${item.quantity}`, 80, yOffset);
        doc.text(`Price: ₱${item.price}`, 140, yOffset);
        yOffset += 7;
      });

      // Space between user entries
      yOffset += 10;

      // Check if we're running out of page space
      if (yOffset > 280) {
        doc.addPage();
        yOffset = 20;
      }
    });

    // Save the PDF
    doc.save(`History_Report_${currentDate}.pdf`);
  };


  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 bg-white/90">
      <div 
        className="absolute inset-0 bg-black/20 backdrop-blur-sm"
        onClick={() => setTotalReserve(prev => ({ ...prev, History: false }))}
      />
      
      <div className="relative w-full max-w-7xl mx-4 md:mx-6 lg:mx-8 bg-white rounded-xl shadow-2xl border border-gray-200">
        {/* Header */}
        <div className="flex flex-col gap-4 p-4 md:p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h2 className="text-xl md:text-2xl font-semibold text-blue-600">History</h2>
            <button
              onClick={() => setTotalReserve(prev => ({ ...prev, History: false }))}
              className="p-1 md:p-2 rounded-full hover:bg-gray-100 transition-colors"
            >
              <VscChromeClose className="w-4 h-4 md:w-5 md:h-5 text-gray-600" />
            </button>
          </div>
        </div>


        <button
                onClick={generatePDF}
                className="p-2 md:p-2 rounded hover:bg-gray-100 transition-colors  h-[2rem] border bg-[tomato]"
                title="Download PDF Report"
              >
          PRINT REPORTS NOW
              </button>

        {/* Merged History Table */}
        <div className="p-4 md:p-6 overflow-x-auto">
          <table className="w-full text-left border-collapse">
            <thead>
              <tr className="bg-gray-100">
                <th className="p-2 md:p-3 border-b text-xs md:text-sm text-gray-700">User Name</th>
                <th className="p-2 md:p-3 border-b text-xs md:text-sm text-gray-700">Total Items</th>
                <th className="p-2 md:p-3 border-b text-xs md:text-sm text-gray-700">Details</th>
              </tr>
            </thead>
            <tbody>
              {mergedHistory.map((userEntry) => (
                <tr key={userEntry.userName} className="hover:bg-gray-50">
                  <td className="p-2 md:p-3 border-b text-xs md:text-sm text-gray-800 truncate max-w-[150px]">{userEntry.userName}</td>
                  <td className="p-2 md:p-3 border-b text-xs md:text-sm text-gray-800">{userEntry.totalItems}</td>
                
                  <td className="p-2 md:p-3 border-b text-xs md:text-sm text-gray-800">
                    <details>
                      <summary className="cursor-pointer text-blue-600 text-xs md:text-sm">View Items</summary>
                      <div className="mt-2 space-y-2 max-h-[300px] overflow-y-auto">
                        {userEntry.items.map((item) => (
                          <div key={item.id} className="bg-gray-100 p-2 rounded">
                            <p className="text-xs md:text-sm text-gray-800 truncate">{item.product_Name}</p>
                            <p className="text-xs text-gray-600">Quantity: {item.quantity}</p>
                            <p className="text-xs text-gray-600">Price: ₱{item.price}</p>
                            <p className="text-xs text-gray-600">Status: {item.status}</p>
                          </div>
                        ))}
                      </div>
                    </details>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

export default AllHistory;
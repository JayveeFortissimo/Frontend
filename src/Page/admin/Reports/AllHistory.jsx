import React, { useMemo } from 'react';
import { VscChromeClose, VscFilePdf } from "react-icons/vsc";
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import AdminProfile from '../../../hooks/AdminHooks/AdminProfile.js';

const AllHistory = ({ setTotalReserve, AllHistory }) => {
  const { profile } = AdminProfile();

  const mergedHistory = useMemo(() => {
    const userMap = new Map();

    AllHistory.forEach(item => {
      const key = item.name;
      if (!userMap.has(key)) {
        userMap.set(key, {
          userName: key,
          items: [],
          totalItems: 0,
          totalPrice: 0
        });
      }

      const userEntry = userMap.get(key);
      userEntry.items.push(item);
      userEntry.totalItems += item.quantity;
      userEntry.totalPrice += item.price * item.quantity;
    });

    return Array.from(userMap.values());
  }, [AllHistory]);

  const generatePDF = () => {
    const doc = new jsPDF();
    
    // Current date and admin info
    const currentDate = new Date().toLocaleDateString();
    const adminName = profile[0]?.name || 'Admin';

    // Set up the document with a modern, clean design
    doc.setFontSize(12);
    doc.setTextColor(33, 33, 33);

    // Header
    doc.setFontSize(16);
    doc.text('Transaction History Report', 14, 22);
    
    // Subheader with admin and date
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated by: ${adminName}`, 14, 30);
    doc.text(`Date: ${currentDate}`, 14, 37);

    // Prepare table data
    const tableColumn = ["User Name", "Total Items", "Total Price"];
    const tableRows = mergedHistory.flatMap(userEntry => [
      [
        userEntry.userName, 
        userEntry.totalItems.toString(), 
        `₱${userEntry.totalPrice.toFixed(2)}`
      ],
      ...userEntry.items.map(item => [
        `  - ${item.product_Name}`,
        `Qty: ${item.quantity}`,
        `₱${(item.price * item.quantity).toFixed(2)}`
      ])
    ]);

    // Add the table
    doc.autoTable({
      startY: 45,
      head: [tableColumn],
      body: tableRows,
      theme: 'striped',
      styles: {
        fontSize: 9,
        cellPadding: 3,
        textColor: [33, 33, 33],
        lineColor: [200, 200, 200],
        lineWidth: 0.5
      },
      headStyles: {
        fillColor: [33, 150, 243],
        textColor: [255, 255, 255],
        fontSize: 10
      }
    });

    // Save the PDF
    doc.save(`History_Report_${currentDate}.pdf`);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 bg-white/90">
      <div 
        className="absolute inset-0 bg-black/20 backdrop-blur-sm"
        onClick={() => setTotalReserve(prev => ({ ...prev, History: false }))}
      />
      
      <div className="relative w-full max-w-7xl mx-4 md:mx-6 lg:mx-8 bg-white rounded-xl shadow-2xl border border-gray-200">
        {/* Header */}
        <div className="flex flex-col gap-4 p-4 md:p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h2 className="text-xl md:text-2xl font-semibold text-blue-600">History</h2>
            <div className="flex items-center space-x-2">
              <button
                onClick={generatePDF}
                className="flex items-center justify-center p-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-300 ease-in-out"
                title="Download PDF Report"
              >
                <VscFilePdf className="w-5 h-5 mr-2" />
                Export PDF
              </button>
              <button
                onClick={() => setTotalReserve(prev => ({ ...prev, History: false }))}
                className="p-1 md:p-2 rounded-full hover:bg-gray-100 transition-colors"
              >
                <VscChromeClose className="w-4 h-4 md:w-5 md:h-5 text-gray-600" />
              </button>
            </div>
          </div>
        </div>

        {/* Existing table remains the same */}
        <div className="p-4 md:p-6 overflow-x-auto">
          {/* ... (rest of the existing table code) ... */}
        </div>
      </div>
    </div>
  );
}

export default AllHistory;